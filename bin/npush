#!/usr/bin/env node

var path     = require('path'),
    fs       = require('fs'),
    util     = require('util'),
    colors   = require('colors'),
    argv     = require('optimist').argv,
    npush    = require('../lib/npush');

var help = [
    "usage: npush [options] ",
    "",
    "Starts a npush server using the specified command-line options",
    "",
    "options:",
    "  --port   PORT       Port that the npush server should run on",
    "  --config OUTFILE    (mandatory!) Location of the configuration file for the npush server",
    "  --silent            Silence the log output from the npush server",
    "  --gateway           start the gateway server for loadbalancing npush servers",
    "  -h, --help          You're staring at it"
].join('\n');

var welcome = [
  "                           _     ",
  "                          | |    ",
  " _ __   _ __   _   _  ___ | |__  ",
  "| '_ \\ | '_ \\ | | | |/ __|| '_ \\ ",
  "| | | || |_) || |_| |\\__ \\| | | |",
  "|_| |_|| .__/  \\__,_||___/|_| |_|",
  "       | |                       ",
  "       |_|                       "
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2 || !argv.config) {
  return util.puts(help);
}

var config = {},
    port = argv.port || 80, 
    server;

try {
  var data = fs.readFileSync(argv.config);
  config = JSON.parse(data.toString());
} catch (ex) {
  util.puts('Error starting npush server: ' + ex);
  process.exit(1);
}

config.silent = typeof argv.silent !== 'undefined' ? argv.silent : config.silent;

if(argv.gateway){
  server = npush.createGatewayServer(port, config);
}else{
  server = npush.createApiServer(port, config);
}

if (!config.silent) {
  util.puts(welcome.rainbow.bold);
  util.puts(' ' +
    (argv.gateway?'Gateway Server'.underline.bold.green:'API Server'.underline.bold.green) +
    ' now listening on port: ' + port);
}
